// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]

}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  shadowDatabaseUrl    = env("SHADOW_URL")
  referentialIntegrity = "prisma"
}



// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  emailisverfied Boolean @default(false)
  image         String?
  accounts      Account[]
  sessions      Session[]
  
  posts         Post[] @relation("owner")
  liked       Post[] @relation(name: "likedby") 
}



model Post {
  id       String   @id @default(cuid())

  date     DateTime @default(now())

  auther   String     

  
  type     String
 
  price    Float
  pricePer String ?
  size     Float
  rooms    Int
 
 governorate String
 municipality String

  isposition Boolean
  lng      Float?
  lat      Float?
  
   Garage Boolean @default(false)
   Balcony Boolean @default(false)
   OutdoorArea Boolean @default(false)
   SwimmingPool Boolean @default(false)
   UndercoverParking Boolean @default(false)
   airConditioning Boolean @default(false)
   solarPanels Boolean @default(false)
   SolarHotwater Boolean @default(false)
  images String ?
  description String @default("")
   

  user         User     @relation(name:"owner",fields: [auther], references: [id], onDelete: Cascade)

  liked       User?     @relation(name:"likedby",fields: [id], references: [id], onDelete: Cascade)

}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
